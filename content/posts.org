#+TITLE: Posts
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: posts
#+HUGO_AUTO_SET_LASTMOD: t
#+OPTIONS: author:nil

* How to write a blog with org-mode and hugo. :org_mode:hugo:emacs:
:PROPERTIES:
:EXPORT_FILE_NAME: how-to-write-a-blog-with-org-mode-and-hugo
:EXPORT_DATE: 2021-03-20
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :categories '("emacs")
:END:

Build a blog with Emacs, Hugo and org-mode its more easy than your think.

** Requirements.

- Emacs
- Hugo
- ox-hugo

** Install ox-hugo

First we need to install =ox-hugo=

#+begin_src emacs-lisp
;; Maybe you need to add melpa repository in your `init.el' file
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; M-x install-package RET ox-hugo
;; Then load it after `ox'
(eval-after-load 'ox
  (require 'ox-hugo))

;; or if your use `use-package' to install and load the package.
;; More info: https://github.com/jwiegley/use-package
(use-package ox-hugo
  :after 'ox)
#+end_src

** Create new Hugo site

First we need to create the basic Hugo directory structure.

Go in your projects folder run this command:

#+begin_src shell
hugo new site kcurtet.github.io # remplace with your site folder
#+end_src

Then we can see the directory structure like this:

#+begin_example
kcurtet.github.io
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── public
├── resources
├── static
└── themes
#+end_example

In the =config.toml= we can see the Hugo's configuration.

Now we need to add a default theme four our blog.

We can create a new git repository to add source-control to our files but also to publish our site.

Then we need to add a theme to our site. In my case i choose the [[github:monkeyWzr/hugo-theme-cactus][Cactus Theme]]

#+begin_src shell
cd kcurtet.github.io
git init
git submodule add https://github.com/monkeyWzr/hugo-theme-cactus themes/cactus
# if you don't have a git repo download the theme instead
git clone https://github.com/monkeyWzr/hugo-theme-cactus themes/cactus
#+end_src

Now we add in the config.toml the theme we have downloaded.

#+begin_example
theme = "cactus"
#+end_example

And voila! your site are done.

** Add content to your site.

We can add content in markdown directly but I love Emacs and I want to edit my blog with org-mode files.

To archive this we need to create a file for our posts. it can be placed anywhere you want but for simplicity i create a new file in the =content/= folder called =posts.org=.

#+begin_src shell
touch content/posts.org # just creates a blank file posts.org
#+end_src

Now with Emacs we add some headers to the file for Hugo.

#+begin_src org
,#+HUGO_BASE_DIR: ../
,#+HUGO_SECTION: posts
#+end_src

In this case the =HUGO_BASE_DIR= is the parent folder of the file.
=HUGO_SECTION= creates a folder =content/posts= where we save the markdown files.

Then you need to create your first blog post.

Start with a Heading or Subheading to add some properties to it.

#+begin_src org
,* TODO Hello this is my first blog post
:PROPERTIES:
:EXPORT_FILE_NAME: my-first-post-with-hugo-and-org-mode
:EXPORT_DATE: 2021-03-20
:EXPORT_HUGO_MENU: :menu "main"
:END:

Text to introduce my post.

,** Sub titles of the post
   More text...
#+end_src

In this example your can create as many headers as posts you want then change the properties to export the content to hugo with the correct file path and date.

=EXPORT_FILE_NAME= the file name of the post in =content/posts= also used as slug.
=EXPORT_DATE= The date of the publication.
=EXPORT_HUGO_MENU: :menu "main"= Add this entry to the main menu.

The =TODO= keyword sets your posts as draft. Hugo doesn't publish drafts.
But we can see an example of the draft with =hugo server -D=

And type =C-c C-e H H= to create the markdown files in =content/posts=.

#+begin_example
.
├── archetypes
├── config.toml
├── content
   └── posts
      └── my-first-post-with-hugo-and-org-mod
├── data
├── layouts
├── public
├── resources
├── static
└── themes
#+end_example

** Create a static site.

We can preview the contents in a local server with:

#+begin_src shell
hugo server -D # -D to see the drafts.
#+end_src

Or we can build the blog with this command:

#+begin_src shell
hugo --minify
#+end_src

Now in we have a new =/public= folder with our static site.

** TODO Build with GitHub pages.

First we need to add a file =.github/workflows/gh-pages.yaml= in our git repository.

Then add this content:

#+begin_src yaml
name: github pages

on:
  push:
    branches:
      - main  # Set a branch to deploy

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.81.0'
          # extended: true

      - name: Build
        run: hugo --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

#+end_src

Then we need to create a repository in GitHub. Then follow the instructions to [[https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-first-deployment-with-github_token][add secrets for deploy actions]].

When we setup all correctly. we can push our repo to GitHub.

And the action should have created a gh-pages branch with the static site. Maybe you need to edit the settings of the repo to see your site.

Don't forget to set your baseUrl in =config.toml= or Hugo can't link the assets correctly.
